class Solution:
    def longestStrChain(self, words: List[str]) -> int:
        
        n = len(words)
        t = {}                                     # to store the longest chain length for each word
        ans = 0
        words.sort(key = len)                      # sort the words by their length
        for i in words:
            t[i] = 1                               # Initialize the chain length for the current word
            for j in range(len(i)):                # try removing one character at a time from the word
                prev = i[:j] + i[j+1:]             # and check if the resulting word exists
                if prev in t:                      # if reduced word exists in t  update the chain length
                    t[i] = max(t[i], t[prev] + 1)  # for the current Word
            ans = max(ans, t[i])
        
        return ans



#------------------------------------------------------------------------------------------------------

        t = {}
        for word in sorted(words, key=len):
            t[word] = max(t.get(word[:i] + word[i + 1:], 0) + 1 for i in range(len(word)))
        return max(t.values())



#---------------------------------------------------------------------------------------------------------










