class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:

        m = len(obstacleGrid)
        n = len(obstacleGrid[0])

        t = [[-1 for i in range(101)]for j in range(101)]

        def solve(i, j):
            if obstacleGrid[i][j] == 1:
                return 0
            path = 0
            if i >= m or j >= n:
                return 0
            if i == m - 1 and j == n - 1:
                return 1
            if t[i][j] != -1:
                return t[i][j]
            if i < m - 1:
                path += solve(i + 1, j)
            if j < n - 1:
                path += solve(i, j + 1)

            t[i][j] =  path
            return t[i][j]

        return solve(0,0)
        

#-----------------------------------------------------------------------------------------------

        t = [[0 for i in range(n + 1)] for j in range(m + 1) ]

        t[0][1] = 1

        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if not obstacleGrid[i - 1][j - 1]:
                    t[i][j] = t[i - 1][j] + t[i][j - 1]

        return t[-1][-1]
