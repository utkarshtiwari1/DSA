Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we do not need any insertions.
Example 2:

Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".
Example 3:

Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".
 

Constraints:

1 <= s.length <= 500
s consists of lowercase English letters.


----------------------------------------------------------------------------------------------------------------------------------------------------------
code--->>>>>>


from functools import lru_cache
class Solution:
    def minInsertions(self, s: str) -> int:
    
 #-----------------------------------------------------------------------------------
        d={}
        def solve(i,j):
            if i >= j:
                return 0
            if (i,j) in d:
                return d[(i,j)]
            if s[i]==s[j]:
                d[(i,j)]= solve(i+1,j-1)
            else:
                d[(i,j)]= 1 + min(solve(i+1,j),solve(i,j-1))
            return d[(i,j)]
        return solve(0,len(s)-1)


#--------------------------------------------------------------
# recu + memo
        n = len(s)
        t = [[-1 for _ in range(n+1)] for _ in range(n+1)]

        def solve(i,j):
            if i >= j:
                return 0
            if t[i][j] != -1:
                return t[i][j]
            same,notsame = 0,0
            if s[i] == s[j]:
                same = solve(i+1,j-1)
            else:
                notsame = 1 + min(solve(i+1,j),solve(i,j-1))

            t[i][j] = same + notsame
            return t[i][j]
        
        return solve(0,n-1)

#-------------------------------------------------

# Recursive 
        @lru_cache(None)
        def t(i,j):
            if i >= j:
                return 0
            if s[i] == s[j]:
                return t(i+1,j-1)
            else:
                return 1 + min(t(i+1,j),t(i,j-1))
        n = len(s)
        return t(0, n-1)
