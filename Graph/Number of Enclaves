class Solution:
    def dfs(self,g,i,j):
        m = len(g)
        n = len(g[0])

        if i<0 or j<0 or i>=m or j>=n or g[i][j] == 0:
            return 
        g[i][j] = 0

        self.dfs(g,i,j-1)
        self.dfs(g,i,j+1)
        self.dfs(g,i-1,j)
        self.dfs(g,i+1,j)
        

    def numEnclaves(self, grid: List[List[int]]) -> int:

        m = len(grid)
        n = len(grid[0])
        count = 0

        for row in range(0,m):
            self.dfs(grid,row,0) 
            self.dfs(grid,row,n-1)

        for col in range(0,n):     
            self.dfs(grid,0,col)    
            self.dfs(grid,m-1,col)

        # for row in range(0,m):
        #     if grid[row][0] == 1:     # first col dfs trav
        #         self.dfs(grid,row,0)
        #     if grid[row][n-1] == 1:   # last col dfs trav
        #         self.dfs(grid,row,n-1)

        # for col in range(0,n):
        #     if grid[0][col] == 1:      # first row dfs trav
        #         self.dfs(grid,0,col)
        #     if grid[m-1][col] == 1:     # last row dfs trav
        #         self.dfs(grid,m-1,col)


        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    count += 1
        
        return count
